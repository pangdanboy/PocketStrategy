{"ast":null,"code":"import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport _FormItem2 from \"element-ui/lib/theme-chalk/form-item.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _FormItem from \"element-ui/lib/form-item\";\nimport _Upload2 from \"element-ui/lib/theme-chalk/upload.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Upload from \"element-ui/lib/upload\";\nimport Vue from 'vue';\nimport axios from 'axios';\nimport App from './App.vue';\nimport router from './router/index';\nimport store from './store/index';\nimport resetStyle from './assets/css/reset.css';\nimport iconStyle from './assets/font/iconfont.css';\nVue.use(resetStyle);\nVue.use(iconStyle);\nVue.use(_Upload);\nVue.use(_FormItem);\nVue.prototype.$message = _Message;\nVue.component(_Message.name, _Message); // 配置全局axios请求地址\n\naxios.defaults.baseURL = 'http://localhost:5000/api/'; // 全局配置axios\n// 请求拦截，在每次发送请求之前在请求头中添加当前用户的token\n\naxios.interceptors.request.use(config => {\n  // 如果此时用户登录\n  if (localStorage.userToken) {\n    // 设置统一的的请求header\n    config.headers.Authorization = localStorage.userToken;\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // 响应拦截，token值过期的时候，做统一做处理，跳转到登录，重新登录，删除token\n\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // return Promise.reject(error)\n  // eslint-disable-next-line no-unreachable\n  _Message.error(error.response.data); // 获取错误状态码\n\n\n  const {\n    status\n  } = error.response;\n\n  if (status === 401) {\n    _Message.error('请重新登录'); // 清除token\n\n\n    localStorage.removeItem('userToken'); // 返回主页\n\n    router.push('/home');\n  }\n});\nVue.prototype.$axios = axios;\nVue.config.productionTip = false;\nnew Vue({\n  router,\n  store,\n  render: h => h(App),\n\n  mounted() {\n    console.log(this.$route);\n  },\n\n  methods: {}\n}).$mount('#app');","map":{"version":3,"names":["Vue","axios","App","router","store","resetStyle","iconStyle","use","prototype","$message","component","name","defaults","baseURL","interceptors","request","config","localStorage","userToken","headers","Authorization","error","Promise","reject","response","data","status","removeItem","push","$axios","productionTip","render","h","mounted","console","log","$route","methods","$mount"],"sources":["E:/front-end-web/project/PocketStrategy/src/main.js"],"sourcesContent":["import Vue from 'vue'\r\nimport axios from 'axios'\r\nimport App from './App.vue'\r\nimport router from './router/index'\r\nimport store from './store/index'\r\nimport resetStyle from './assets/css/reset.css'\r\nimport iconStyle from './assets/font/iconfont.css'\r\nimport { Message, Upload, FormItem } from 'element-ui'\r\nVue.use(resetStyle)\r\nVue.use(iconStyle)\r\nVue.use(Upload)\r\nVue.use(FormItem)\r\nVue.prototype.$message = Message\r\nVue.component(Message.name, Message)\r\n// 配置全局axios请求地址\r\naxios.defaults.baseURL = 'http://localhost:5000/api/'\r\n// 全局配置axios\r\n// 请求拦截，在每次发送请求之前在请求头中添加当前用户的token\r\naxios.interceptors.request.use(config => {\r\n  // 如果此时用户登录\r\n  if (localStorage.userToken) {\r\n    // 设置统一的的请求header\r\n    config.headers.Authorization = localStorage.userToken\r\n  }\r\n  return config\r\n}, error => {\r\n  return Promise.reject(error)\r\n})\r\n// 响应拦截，token值过期的时候，做统一做处理，跳转到登录，重新登录，删除token\r\naxios.interceptors.response.use(response => {\r\n  return response\r\n}, error => {\r\n  // return Promise.reject(error)\r\n  // eslint-disable-next-line no-unreachable\r\n  Message.error(error.response.data)\r\n  // 获取错误状态码\r\n  const { status } = error.response\r\n  if (status === 401) {\r\n    Message.error('请重新登录')\r\n    // 清除token\r\n    localStorage.removeItem('userToken')\r\n    // 返回主页\r\n    router.push('/home')\r\n  }\r\n})\r\nVue.prototype.$axios = axios\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App),\r\n  mounted () {\r\n    console.log(this.$route)\r\n  },\r\n  methods: {\r\n  }\r\n}).$mount('#app')\r\n"],"mappings":";;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAEAN,GAAG,CAACO,GAAJ,CAAQF,UAAR;AACAL,GAAG,CAACO,GAAJ,CAAQD,SAAR;AACAN,GAAG,CAACO,GAAJ;AACAP,GAAG,CAACO,GAAJ;AACAP,GAAG,CAACQ,SAAJ,CAAcC,QAAd;AACAT,GAAG,CAACU,SAAJ,CAAc,SAAQC,IAAtB,Y,CACA;;AACAV,KAAK,CAACW,QAAN,CAAeC,OAAf,GAAyB,4BAAzB,C,CACA;AACA;;AACAZ,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BR,GAA3B,CAA+BS,MAAM,IAAI;EACvC;EACA,IAAIC,YAAY,CAACC,SAAjB,EAA4B;IAC1B;IACAF,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BH,YAAY,CAACC,SAA5C;EACD;;EACD,OAAOF,MAAP;AACD,CAPD,EAOGK,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CATD,E,CAUA;;AACApB,KAAK,CAACa,YAAN,CAAmBU,QAAnB,CAA4BjB,GAA5B,CAAgCiB,QAAQ,IAAI;EAC1C,OAAOA,QAAP;AACD,CAFD,EAEGH,KAAK,IAAI;EACV;EACA;EACA,SAAQA,KAAR,CAAcA,KAAK,CAACG,QAAN,CAAeC,IAA7B,EAHU,CAIV;;;EACA,MAAM;IAAEC;EAAF,IAAaL,KAAK,CAACG,QAAzB;;EACA,IAAIE,MAAM,KAAK,GAAf,EAAoB;IAClB,SAAQL,KAAR,CAAc,OAAd,EADkB,CAElB;;;IACAJ,YAAY,CAACU,UAAb,CAAwB,WAAxB,EAHkB,CAIlB;;IACAxB,MAAM,CAACyB,IAAP,CAAY,OAAZ;EACD;AACF,CAfD;AAgBA5B,GAAG,CAACQ,SAAJ,CAAcqB,MAAd,GAAuB5B,KAAvB;AAEAD,GAAG,CAACgB,MAAJ,CAAWc,aAAX,GAA2B,KAA3B;AAEA,IAAI9B,GAAJ,CAAQ;EACNG,MADM;EAENC,KAFM;EAGN2B,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAAC9B,GAAD,CAHR;;EAIN+B,OAAO,GAAI;IACTC,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAjB;EACD,CANK;;EAONC,OAAO,EAAE;AAPH,CAAR,EASGC,MATH,CASU,MATV"},"metadata":{},"sourceType":"module"}